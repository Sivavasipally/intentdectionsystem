app:
  description: 'Analyzes CSV files and generates interactive dashboard with AI-recommended charts'
  icon: ðŸ“Š
  icon_background: '#E4F2FF'
  mode: workflow
  name: CSV Data Visualizer
  
workflow:
  features:
    file_upload:
      enabled: true
    opening_statement: ''
    retriever_resource:
      enabled: false
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      
  graph:
    edges:
      - data:
          isInIteration: false
          sourceType: start
          targetType: code
        id: start-to-profiler
        source: '1000'
        sourceHandle: source
        target: '1001'
        targetHandle: target
        type: custom
        zIndex: 0
      - data:
          isInIteration: false
          sourceType: code
          targetType: llm
        id: profiler-to-llm
        source: '1001'
        sourceHandle: source
        target: '1002'
        targetHandle: target
        type: custom
        zIndex: 0
      - data:
          isInIteration: false
          sourceType: llm
          targetType: code
        id: llm-to-builder
        source: '1002'
        sourceHandle: source
        target: '1003'
        targetHandle: target
        type: custom
        zIndex: 0
      - data:
          isInIteration: false
          sourceType: code
          targetType: end
        id: builder-to-end
        source: '1003'
        sourceHandle: source
        target: '1004'
        targetHandle: target
        type: custom
        zIndex: 0
        
    nodes:
      - data:
          desc: ''
          selected: false
          title: Start
          type: start
          variables:
            - label: CSV Content
              max_length: 1000000
              options: []
              required: true
              type: text-input
              variable: csv_content
        height: 116
        id: '1000'
        position:
          x: 80
          y: 282
        positionAbsolute:
          x: 80
          y: 282
        selected: false
        sourcePosition: right
        targetPosition: left
        type: custom
        width: 244
        
      - data:
          code: |
            import csv
            import json
            from io import StringIO
            
            # Parse CSV using standard library
            reader = csv.DictReader(StringIO(csv_content))
            rows = list(reader)
            
            if not rows:
                return {
                    "profile_json": json.dumps({"error": "Empty CSV"}),
                    "data_json": "[]"
                }
            
            # Get column names
            columns = list(rows[0].keys()) if rows else []
            
            # Analyze column types
            numeric_cols = []
            text_cols = []
            
            for col in columns:
                # Check if column is numeric by trying to convert first non-empty value
                is_numeric = False
                for row in rows:
                    if row[col] and row[col].strip():
                        try:
                            float(row[col])
                            is_numeric = True
                        except ValueError:
                            is_numeric = False
                        break
                
                if is_numeric:
                    numeric_cols.append(col)
                else:
                    text_cols.append(col)
            
            # Create profile
            profile = {
                "rows": len(rows),
                "columns": len(columns),
                "column_names": columns,
                "numeric_columns": numeric_cols,
                "text_columns": text_cols,
                "sample_data": rows[:3] if len(rows) >= 3 else rows
            }
            
            # Calculate basic stats for numeric columns
            for col in numeric_cols:
                values = []
                for row in rows:
                    try:
                        val = float(row[col])
                        values.append(val)
                    except:
                        pass
                
                if values:
                    profile[f"{col}_min"] = min(values)
                    profile[f"{col}_max"] = max(values)
                    profile[f"{col}_avg"] = sum(values) / len(values)
            
            return {
                "profile_json": json.dumps(profile, indent=2),
                "data_json": json.dumps(rows)
            }
          code_language: python3
          desc: ''
          outputs:
            profile_json:
              type: string
            data_json:
              type: string
          selected: false
          title: CSV Profiler
          type: code
          variables:
            - value_selector:
                - '1000'
                - csv_content
              variable: csv_content
        height: 54
        id: '1001'
        position:
          x: 380
          y: 282
        positionAbsolute:
          x: 380
          y: 282
        selected: false
        sourcePosition: right
        targetPosition: left
        type: custom
        width: 244

      - data:
          context:
            enabled: false
            variable_selector: []
          desc: ''
          model:
            completion_params:
              temperature: 0.7
            mode: chat
            name: gpt-3.5-turbo
            provider: openai
          prompt_template:
            - id: prompt-1
              role: system
              text: |
                You are a data visualization expert. Analyze the CSV profile and recommend 3-5 charts.
                
                Based on the data types available, suggest appropriate visualizations.
                
                Return ONLY valid JSON in this exact format:
                {
                  "charts": [
                    {
                      "type": "bar|line|scatter|pie|histogram",
                      "title": "Descriptive Chart Title",
                      "x_column": "column_name",
                      "y_column": "column_name_or_null",
                      "description": "What this chart shows"
                    }
                  ],
                  "summary": "Brief analysis summary"
                }
            - id: prompt-2
              role: user
              text: |
                Analyze this dataset and recommend the best visualizations:
                
                {{#1001.profile_json#}}
                
                Consider the numeric and text columns to suggest meaningful charts.
          selected: false
          title: Chart Recommender
          type: llm
          variables: []
          vision:
            enabled: false
        height: 98
        id: '1002'
        position:
          x: 680
          y: 282
        positionAbsolute:
          x: 680
          y: 282
        selected: false
        sourcePosition: right
        targetPosition: left
        type: custom
        width: 244

      - data:
          code: |
            import json
            import base64
            
            # Parse inputs
            try:
                data = json.loads(data_json)
                recommendations = json.loads(chart_json)
            except:
                return {
                    "dashboard_html": "<html><body><h1>Error parsing data</h1></body></html>"
                }
            
            # Generate HTML with Chart.js (works without external libraries)
            html = """<!DOCTYPE html>
            <html>
            <head>
                <title>Data Dashboard</title>
                <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        margin: 0;
                        padding: 20px;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    }
                    .container {
                        max-width: 1200px;
                        margin: 0 auto;
                        background: white;
                        border-radius: 10px;
                        padding: 30px;
                        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                    }
                    h1 {
                        color: #333;
                        text-align: center;
                        margin-bottom: 20px;
                    }
                    .summary {
                        background: #f7f9fc;
                        padding: 15px;
                        border-radius: 8px;
                        margin-bottom: 30px;
                        border-left: 4px solid #667eea;
                    }
                    .chart-container {
                        margin-bottom: 40px;
                        padding: 20px;
                        background: #fff;
                        border: 1px solid #e0e0e0;
                        border-radius: 8px;
                    }
                    .chart-title {
                        font-size: 1.2em;
                        color: #444;
                        margin-bottom: 10px;
                        font-weight: 600;
                    }
                    .chart-desc {
                        color: #666;
                        font-size: 0.9em;
                        margin-bottom: 15px;
                    }
                    canvas {
                        max-height: 400px;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>ðŸ“Š Data Visualization Dashboard</h1>
                    <div class="summary">
                        <h3>Analysis Summary</h3>
                        <p>""" + recommendations.get('summary', 'Data analysis complete.') + """</p>
                        <p><strong>Dataset:</strong> """ + f"{len(data)} rows" + """</p>
                    </div>
            """
            
            # Generate charts using Chart.js
            for i, chart in enumerate(recommendations.get('charts', [])):
                chart_id = f"chart_{i}"
                chart_type = chart.get('type', 'bar')
                title = chart.get('title', f'Chart {i+1}')
                description = chart.get('description', '')
                x_col = chart.get('x_column')
                y_col = chart.get('y_column')
                
                html += f"""
                    <div class="chart-container">
                        <div class="chart-title">{title}</div>
                        <div class="chart-desc">{description}</div>
                        <canvas id="{chart_id}"></canvas>
                    </div>
                """
                
                # Prepare data for Chart.js
                if chart_type in ['bar', 'line', 'scatter']:
                    if x_col and y_col:
                        labels = []
                        values = []
                        for row in data[:30]:  # Limit to first 30 rows for display
                            if x_col in row and y_col in row:
                                labels.append(str(row[x_col]))
                                try:
                                    values.append(float(row[y_col]))
                                except:
                                    values.append(0)
                        
                        chart_config = {
                            'type': 'line' if chart_type == 'line' else 'bar',
                            'data': {
                                'labels': labels,
                                'datasets': [{
                                    'label': y_col,
                                    'data': values,
                                    'backgroundColor': 'rgba(102, 126, 234, 0.5)',
                                    'borderColor': 'rgba(102, 126, 234, 1)',
            
            
            
            
            
            
